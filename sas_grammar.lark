// SAS Grammar for Lark Parser
// Handles core SAS constructs without macros

?start: program

program: statement*

statement: data_step
         | proc_step  
         | COMMENT
         | ";"

// DATA Step
data_step: "data"i dataset_ref* ";" data_step_body* "run"i ";"

data_step_body: set_statement
              | merge_statement  
              | by_statement
              | where_clause
              | keep_statement
              | drop_statement
              | rename_statement
              | input_statement
              | put_statement
              | infile_statement
              | file_statement
              | format_statement
              | informat_statement
              | label_statement
              | do_block
              | output_statement
              | retain_statement
              | length_statement
              | stop_statement
              | delete_statement
              | statement_body

set_statement: "set"i dataset_ref ("(" dataset_options ")")? ";"

merge_statement: "merge"i dataset_ref+ ("(" dataset_options ")")? ";"

by_statement: "by"i variable+ ";"

where_clause: "where"i condition ";"

keep_statement: "keep"i variable+ ";"

drop_statement: "drop"i variable+ ";"

rename_statement: "rename"i rename_pair+ ";"

rename_pair: variable "=" variable

input_statement: "input"i input_spec+ ";"

input_spec: variable format_spec?

format_spec: FORMAT_LITERAL

put_statement: "put"i put_spec+ ";"

put_spec: variable format_spec?

infile_statement: "infile"i file_ref file_options? ";"

file_statement: "file"i file_ref file_options? ";"

file_ref: STRING | IDENTIFIER

file_options: option+

format_statement: "format"i format_assignment+ ";"

format_assignment: variable+ format_spec

informat_statement: "informat"i informat_assignment+ ";"

informat_assignment: variable+ format_spec

label_statement: "label"i label_assignment+ ";"

label_assignment: variable "=" STRING

do_block: do_simple
        | do_while_loop
        | do_until_loop
        | do_iterative_loop

do_simple: "do"i ";" data_step_body* "end"i ";"

do_while_loop: "do"i "while"i "(" condition ")" ";" data_step_body* "end"i ";"

do_until_loop: "do"i "until"i "(" condition ")" ";" data_step_body* "end"i ";"

do_iterative_loop: "do"i variable "=" expression "to"i expression ("by"i expression)? ";" data_step_body* "end"i ";"

output_statement: "output"i dataset_ref? ";"

retain_statement: "retain"i retain_spec+ ";"

retain_spec: variable initial_value?

initial_value: expression

length_statement: "length"i length_assignment+ ";"

length_assignment: variable+ length_spec

length_spec: NUMBER | FORMAT_LITERAL

stop_statement: "stop"i ";"

delete_statement: "delete"i ";"

dataset_options: dataset_option ("," dataset_option)*

dataset_option: option 
              | keep_option
              | drop_option
              | rename_option

option: IDENTIFIER "=" option_value

keep_option: "keep"i "=" variable_list

drop_option: "drop"i "=" variable_list

rename_option: "rename"i "=" "(" rename_pair+ ")"

variable_list: variable+

option_value: STRING 
            | NUMBER 
            | dataset_ref

statement_body: assignment
              | if_statement
              | empty_statement
              | COMMENT

empty_statement: ";"

// PROC Step  
proc_step: "proc"i IDENTIFIER proc_options? ";" proc_body* "run"i ";"

proc_options: option+

proc_body: statement_body

// Assignments
assignment: variable "=" expression ";"

assignment_no_semicolon: variable "=" expression

// IF Statements  
if_statement: "if"i condition "then"i then_action_with_semicolon
           | "if"i condition "then"i then_action_no_semicolon ";"

then_action_with_semicolon: do_block

then_action_no_semicolon: assignment_no_semicolon
                        | expression
                        | output_no_semicolon
                        | stop_no_semicolon
                        | delete_no_semicolon

output_no_semicolon: "output"i dataset_ref?

stop_no_semicolon: "stop"i

delete_no_semicolon: "delete"i

condition: expression comparison_op expression
         | expression

comparison_op: EQ | NE | LT | LE | GT | GE | EQUAL | NEQUAL | LESSEQ | MOREEQ | LESS | MORE

EQ: "eq"i
NE: "ne"i  
LT: "lt"i
LE: "le"i
GT: "gt"i
GE: "ge"i
EQUAL: "="
NEQUAL: "<>"
LESSEQ: "<="
MOREEQ: ">="
LESS: "<"
MORE: ">"

// Expressions  
expression: term
          | expression ADD term
          | expression SUB term

term: factor
    | term MUL factor  
    | term DIV factor

ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"

factor: variable
      | NUMBER
      | STRING  
      | "(" expression ")"

variable: IDENTIFIER ("." IDENTIFIER)?

dataset_ref: IDENTIFIER ("." IDENTIFIER)?

// Terminals
NUMBER: /\d+(\.\d+)?/

FORMAT_LITERAL: /\$[a-zA-Z]*\d+\.?\d*/ | /[a-zA-Z]+\d+\.?\d*/ | /\$\d+\.?\d*/

IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/

STRING: /"[^"]*"/ | /'[^']*'/

COMMENT: /\/\*[\s\S]*?\*\// | /^\s*\*[^\r\n]*/

%import common.WS
%ignore WS